Google cloud statt digitalocean, nginx statt apache, let's go

-ubuntu 18.04 LTS genommen
-ssh-key per metadata hinzufügen, ssh dann per localusername@ip
-ports 5000-9000 oder whatever öffnen! https://cloud.google.com/vpc/docs/using-firewalls
-sudo apt update & upgrade, yadda yadda
-sudo apt-get install build-essential python-dev
-sudo apt-get install python3-pip python3-dev nginx
-sudo rm /usr/bin/python && sudo ln -s $(which python3) /usr/bin/python
-sudo rm /usr/bin/pip && sudo ln -s $(which pip3) /usr/bin/pip OR sudo apt install python3-pip && sudo ln -s $(which pip3) /usr/bin/pip
-sudo pip install --system uwsgi
-sudo pip3 install uwsgi flask --system
-git clone git@github.com:cstenkamp/medibot_pythonbackend.git && cd medibot_pythonbackend (NOT AS SUDO)
-sudo pip install -r requirements.txt --system
-cd /var/www/ && sudo chown -R www-data.www-data html && sudo chmod 777 html && cd html
-uwsgi --socket 0.0.0.0:8000 --protocol=http -w wsgi sollte klappen
-sudo /usr/local/bin/uwsgi --ini /var/www/html/medibot_pythonbackend/app.ini sollte klappen
-sudo sh -c 'echo "[Unit]
Description="uWSGI server instance for medibot_pythonbackend"
After=network.target

[Service]
User=www-data
Group=www-data
WorkingDirectory=/var/www/html/medibot_pythonbackend/
Environment=FLASK_ENV=test
ExecStart=/usr/local/bin/uwsgi --ini /var/www/html/medibot_pythonbackend/app.ini

[Install]
WantedBy=multi-user.target" > /etc/systemd/system/medibot_pythonbackend.service'
-sudo systemctl start medibot_pythonbackend
-zum testen: sudo systemctl status medibot_pythonbackend.service und journalctl -u medibot_pythonbackend.service -b
-sudo systemctl enable medibot_pythonbackend
Then set up the reverse proxy...:
-sudo unlink /etc/nginx/sites-enabled/default
-sudo sh -c 'echo "server {
    listen       80;
    server_name  cstenkamp.xyz www.cstenkamp.xyz;
    access_log   /var/log/nginx/medibot_pythonbackend_access.log;
    error_log    /var/log/nginx/medibot_pythonbackend_error.log;

    root /var/www/html/;

    location = /medibot {rewrite ^ /medibot/; }
    location /medibot {try_files $uri @medibot; }
    location @medibot {
        rewrite (^.*)(\/medibot)(\/?.*?$) $1$3 break;
        include     uwsgi_params;
        uwsgi_pass  unix:/var/www/html/medibot_pythonbackend/medibot_pythonbackend.sock;
    }
}" > /etc/nginx/sites-available'
(see https://www.nginx.com/blog/creating-nginx-rewrite-rules/)	
-ln -s /etc/nginx/sites-available/reverse-proxy.conf /etc/nginx/sites-enabled/reverse-proxy.conf
-sudo nginx -t -c /etc/nginx/nginx.conf oder sudo service nginx configtest
-sudo /etc/init.d/nginx restart oder sudo service nginx restart

HTTPS-ZERTIFIKAT
//cd && git clone https://github.com/certbot/certbot.git && cd certbot && ./letsencrypt-auto
sudo add-apt-repository ppa:certbot/certbot
sudo apt-get update
sudo apt-get install python-certbot-nginx
sudo certbot --nginx -d cstenkamp.xyz -d www.cstenkamp.xyz

FOR REMOTE DEBUGGING
https://stackoverflow.com/questions/47581248/how-to-remote-debug-flask-request-behind-uwsgi-in-pycharm?rq=1
-app.ini processes auf 1 und enable-threads auf false
-drauf achten dass die version des debuggers die pyhcarm will installiert ist!

-for some reason muss in /var/www/html/ ein favicon.ico liegen

-> das log steht in journalctl -u medibot_pythonbackend.service -b
-> restarten muss man sudo service medibot_pythonbackend restart (..auch wenn nginx hin und wieder restarten bestimmt nicht schadet)



============== OLD & ORIGINAL ==============
ORIGINAL-LINKS: https://www.gab.lc/articles/flask-nginx-uwsgi/  & https://www.keycdn.com/support/nginx-reverse-proxy
NOTES DAZU:
-https://www.gab.lc/articles/flask-nginx-uwsgi/  ...aber ohne deren test-application
	-cd /var/www/ && sudo chown -R www-data.www-data html && sudo chmod 777 html && cd html && sudo git clone git@github.com:cstenkamp/medibot_pythonbackend.git && cd medibot_pythonbackend
	-deploy key fürs repo: https://github.com/cstenkamp/medibot_pythonbackend/settings/keys  -- don't forget to set the IdentityFile in the .ssh/config!
	-sudo pip install -r requirements.txt --system
	-der schritt "You can test the app.ini file with: \ /usr/local/bin/uwsgi --ini /var/www/html/my_app/app.ini" wird nicht funktionieren (erstmal ists eh nicht /usr/local/bin/wsgi, und zweitens ist die socket komisch. Es klappt wenn man in der app.ini die zeile zu socket = 0.0.0.0:8000  (und am besten zsl protocol = http) hinzufügt (TEMPORÄR!))
	-chmod 777 /usr/local/bin/uwsgi falls uwsgi da liegt, der service will das als www-data ausführen
	-sudo chown -R www-data.www-data /var/www/html/medibot_pythonbackend
	-journalctl -u medibot_pythonbackend.service -b --> probleme sind entweder permissions oder falshce python-versionen/packages die irgendwie von irgendwo nicht erreichbar sind
-Alternativ dazu einfach den flask-prozess als system-service machen und nur ne nginx reverse proxy einrichten: https://www.keycdn.com/support/nginx-reverse-proxy
